=====================================
Math Expressions
=====================================

1 + x + 1
0xDEAD * x / 0.01
0xDEAD * (x / 0.01)

---

(source
  (expression_statement
    (binary_operator (binary_operator (integer) (identifier)) (integer)))
  (expression_statement
    (binary_operator (binary_operator (integer) (identifier)) (float)))
  (expression_statement
    (binary_operator (integer) (parenthesized_expression
      (binary_operator (identifier) (float))))))

=====================================
Is Operator
=====================================

x is y
x is int()
(1 + 1) is Name

---

(source
  (expression_statement (binary_operator (identifier) (identifier)))
  (expression_statement (binary_operator (identifier) (call (identifier) (argument_list))))
  (expression_statement (binary_operator
    (parenthesized_expression
      (binary_operator (integer) (integer)))
    (identifier))))

=====================================
As Operator
=====================================

x as Y
x() as Y

---

(source
  (expression_statement (binary_operator (identifier) (identifier)))
  (expression_statement (binary_operator (call (identifier) (argument_list)) (identifier))))

=====================================
NodePath
=====================================

@"Node/Path"
@'Node/Path'
@ 'node/path'
var x = @"NodePath"

---

(source
  (expression_statement (node_path))
  (expression_statement (node_path))
  (ERROR (UNEXPECTED ' ')) (expression_statement (string))
  (variable_statement (identifier) (node_path)))

=====================================
Get Node
=====================================

$node/path
$'node/path'
$"node/path"
$ "node/path"
var x = $"node/path"

---

(source
  (expression_statement (get_node))
  (expression_statement (get_node))
  (expression_statement (get_node))
  (ERROR (UNEXPECTED ' ')) (expression_statement (string))
  (variable_statement (identifier) (get_node)))

=====================================
Breakpoint Statement
=====================================

breakpoint
breakpoint; hi()

---

(source
  (breakpoint_statement)
  (breakpoint_statement)
  (expression_statement (call (identifier) (argument_list))))

=====================================
Variables
=====================================

var x
var x = "hello"
var x := "hello"
var x: Type
var x: Type = "hello"

---

(source
  (variable_statement (identifier))
  (variable_statement (identifier) (string))
  (variable_statement (identifier) (inferred_type) (string))
  (variable_statement (identifier) (type (identifier)))
  (variable_statement (identifier) (type (identifier)) (string)))

=====================================
Variable Assign Expressions
=====================================

var x = 1 + x + 1

---

(source
  (variable_statement (identifier)
      (binary_operator (binary_operator (integer) (identifier)) (integer))))

=====================================
Remote Variables
=====================================

remote var hello
master var hello
puppet var hello
remotesync var hello
mastersync var hello
puppetsync var hello

---

(source
  (variable_statement (remote_keyword) (identifier))
  (variable_statement (remote_keyword) (identifier))
  (variable_statement (remote_keyword) (identifier))
  (variable_statement (remote_keyword) (identifier))
  (variable_statement (remote_keyword) (identifier))
  (variable_statement (remote_keyword) (identifier)))

=====================================
Export Variables
=====================================

export var a
export var a = "a"
export remote var a

export(Type) var a
export(Type) var a = "a"
export(Type) remote var a

export(Type, Param) var a
export(Type, "Param") var a = "a"

---

(source
  (export_variable_statement (identifier))
  (export_variable_statement (identifier) (string))
  (export_variable_statement (remote_keyword) (identifier))
  (export_variable_statement (argument_list (identifier)) (identifier))
  (export_variable_statement (argument_list (identifier)) (identifier) (string))
  (export_variable_statement (argument_list (identifier)) (remote_keyword) (identifier))
  (export_variable_statement (argument_list (identifier) (identifier)) (identifier))
  (export_variable_statement (argument_list (identifier) (string)) (identifier) (string)))

=====================================
SetGet Variables
=====================================

var x setget setter,getter
var x setget setter
var x setget ,getter

---

(source
  (variable_statement (identifier) (setget (setter (identifier)) (getter (identifier))))
  (variable_statement (identifier) (setget (setter (identifier))))
  (variable_statement (identifier) (setget (getter (identifier))))
)

=====================================
Onready Variables
=====================================

onready var hello
onready var hello: World

---

(source
  (onready_variable_statement (identifier))
  (onready_variable_statement (identifier) (type (identifier))))

=====================================
Const Variables
=====================================

const CONST = 1
const CONST := 1
const CONST : int = 1

---

(source
  (const_statement (identifier) (integer))
  (const_statement (identifier) (inferred_type) (integer))
  (const_statement (identifier) (type (identifier)) (integer)))


=====================================
Invalid Variables
=====================================

var x = var y
var x :=

---

(source
  (variable_statement (identifier) (ERROR (identifier)) (identifier))
  (ERROR (identifier)  (inferred_type)))

=====================================
Function Definitions
=====================================

func hello():
  pass

func hello() -> Type:
  pass

func hello(param):
  pass

func hello(param) -> Type:
  pass

func hello(default_param="string"):
  pass

func hello(default_param="string") -> Type:
  pass

func hello(typed_param: Type):
  pass

func hello(typed_param: Type) -> Type:
  pass

func hello(typed_default_param: Type="string"):
  pass

func hello(typed_default_param: Type="string") -> Type:
  pass

---

(source
  (function_definition (identifier) (parameters)
    (body (pass_statement)))
  (function_definition (identifier) (parameters) (return_type (type (identifier)))
    (body (pass_statement)))
  (function_definition (identifier) (parameters (identifier))
    (body (pass_statement)))
  (function_definition (identifier) (parameters (identifier)) (return_type (type (identifier)))
    (body (pass_statement)))
  (function_definition (identifier) (parameters (default_parameter (identifier) (string)))
    (body (pass_statement)))
  (function_definition (identifier) (parameters (default_parameter (identifier) (string))) (return_type (type (identifier)))
    (body (pass_statement)))
  (function_definition (identifier) (parameters (typed_parameter (identifier) (type (identifier))))
    (body (pass_statement)))
  (function_definition (identifier) (parameters (typed_parameter (identifier) (type (identifier)))) (return_type (type (identifier)))
    (body (pass_statement)))
  (function_definition (identifier) (parameters (typed_default_parameter (identifier) (type (identifier)) (string)))
    (body (pass_statement)))
  (function_definition (identifier) (parameters (typed_default_parameter (identifier) (type (identifier)) (string))) (return_type (type (identifier)))
    (body (pass_statement))))

=====================================
Remote Function Definitions
=====================================

remote func hello(): pass
master func hello(): pass
puppet func hello(): pass
remotesync func hello(): pass
mastersync func hello(): pass
puppetsync func hello(): pass

---

(source
  (function_definition (remote_keyword) (identifier) (parameters)
    (body (pass_statement)))
  (function_definition (remote_keyword) (identifier) (parameters)
    (body (pass_statement)))
  (function_definition (remote_keyword) (identifier) (parameters)
    (body (pass_statement)))
  (function_definition (remote_keyword) (identifier) (parameters)
    (body (pass_statement)))
  (function_definition (remote_keyword) (identifier) (parameters)
    (body (pass_statement)))
  (function_definition (remote_keyword) (identifier) (parameters)
    (body (pass_statement))))

=====================================
Static Function Definitions
=====================================

static func hello(): pass

---

(source
  (function_definition (static_keyword) (identifier) (parameters)
    (body (pass_statement))))

=====================================
Constructor Definitions
=====================================

func _init(): pass
func _init().(): pass
func _init(a, b).(a,b): pass

---

(source
  (constructor_definition
    (parameters)
    (body (pass_statement)))
  (constructor_definition
    (parameters)
    (argument_list)
    (body (pass_statement)))
  (constructor_definition
    (parameters (identifier) (identifier))
    (argument_list (identifier) (identifier))
    (body (pass_statement))))

=====================================
Base Calls
=====================================

.hello()
var x = .hello()
var x = hello(.hello())

---

(source
  (expression_statement (base_call (identifier) (argument_list)))
  (variable_statement (identifier) (base_call (identifier) (argument_list)))
  (variable_statement
    (identifier)
    (call (identifier) (argument_list (base_call (identifier) (argument_list))))))

=====================================
Function Calls
=====================================

hello()
hello(world)
hello("world")
hello(1 + 1, "world")
hello(hello())
hello(hello("world"))

---

(source
  (expression_statement (call (identifier) (argument_list)))
  (expression_statement (call (identifier) (argument_list (identifier))))
  (expression_statement (call (identifier) (argument_list (string))))
  (expression_statement (call (identifier) (argument_list (binary_operator (integer) (integer)) (string))))
  (expression_statement (call (identifier) (argument_list (call (identifier) (argument_list)))))
  (expression_statement (call (identifier) (argument_list (call (identifier) (argument_list (string))))))
)

=====================================
Match Statements
=====================================

match x:
    1: pass
    _: pass
    TYPE_ARRAY: pass
    var new_var: pass

    []: pass
    [1, 3, "test", null]: pass
    [var start, _]: pass
    [42, ..]: pass

    {}: pass
    {"name": "Dennis"}: pass
    {"name": "Dennis", "age": var age}: pass
    {"key": "godotisawesome", ..}: pass

    1, 2, 3: pass

---

(source
  (match_statement (identifier) (match_body
    (pattern_section (integer) (body (pass_statement)))
    (pattern_section (underscore) (body (pass_statement)))
    (pattern_section (identifier) (body (pass_statement)))
    (pattern_section (pattern_binding (identifier)) (body (pass_statement)))

    (pattern_section (pattern_array) (body (pass_statement)))
    (pattern_section
      (pattern_array (integer) (integer) (string) (null))
      (body (pass_statement)))
    (pattern_section
      (pattern_array (pattern_binding (identifier)) (underscore))
      (body (pass_statement)))
    (pattern_section
      (pattern_array (integer) (pattern_open_ending))
      (body (pass_statement)))

    (pattern_section (pattern_dictionary) (body (pass_statement)))
    (pattern_section
      (pattern_dictionary (pattern_pair (string) (string)))
      (body (pass_statement)))
    (pattern_section
      (pattern_dictionary
        (pattern_pair (string) (string))
        (pattern_pair (string) (pattern_binding (identifier))))
      (body (pass_statement)))
    (pattern_section
      (pattern_dictionary
        (pattern_pair (string) (string))
        (pattern_open_ending))
      (body (pass_statement)))

    (pattern_section
      (integer)
      (integer)
      (integer)
      (body (pass_statement))))))

=====================================
Signal Statements
=====================================

signal x
signal x()
signal x(a, b)

---

(source
  (signal_statement (identifier))
  (signal_statement (identifier))
  (signal_statement (identifier) (identifier_list (identifier) (identifier))))

=====================================
Class Name
=====================================

class_name Name
class_name Name, "icon"

---

(source
  (class_name_statement (identifier))
  (class_name_statement (identifier) (class_name_icon_path (string))))

=====================================
Tool and Extend
=====================================

tool
extends "class/path"
extends "class/path".Attr
extends "class/path".Attr.Attr
extends Ident
extends Ident.Attr
extends Ident.Attr.Attr

---
(source
  (tool_statement)
  (extends_statement (string))
  (extends_statement (string) (dotted_name (identifier)))
  (extends_statement (string) (dotted_name (identifier) (identifier)))
  (extends_statement (dotted_name (identifier)))
  (extends_statement (dotted_name (identifier) (identifier)))
  (extends_statement (dotted_name (identifier) (identifier) (identifier))))

=====================================
Inner Class
=====================================

class Name:
  func hello(): pass

class Name extends Type:
  func hello(): pass

class Name:
  extends Type

---

(source
  (class_definition (identifier)
    (body
      (function_definition (identifier) (parameters)
        (body (pass_statement)))))
  (class_definition (identifier) (extends_statement (dotted_name (identifier)))
    (body
      (function_definition (identifier) (parameters)
        (body (pass_statement)))))
  (class_definition (identifier)
    (body
      (extends_statement (dotted_name (identifier))))))

============================================
Enum declarations
============================================

enum Hello {
  val1,
  val2 = 5,
  val3
}

enum {
  val1,
  val2 = 5,
  val3
}

---

(source
  (enum_definition (identifier)
    (enumerator_list
      (enumerator (identifier))
      (enumerator (identifier) (integer))
      (enumerator (identifier))))
  (enum_definition
    (enumerator_list
      (enumerator (identifier))
      (enumerator (identifier) (integer))
      (enumerator (identifier)))))
